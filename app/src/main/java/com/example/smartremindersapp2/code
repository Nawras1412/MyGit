*********************************************************************************
using singeleton
private static ClassName MyClass;    //variable

private ClassName(){}     //constructor

public static AuxiliaryFunctions getInstance(){        // get instance from this class
    if (MyAuxiliaryFunctions==null)
        MyAuxiliaryFunctions=new AuxiliaryFunctions();
    return MyAuxiliaryFunctions;
}

*********************************************************************************

package refactoring_guru.abstract_factory.example.buttons;

 // Abstract Factory assumes that you have several families of products,
 // structured into separate class hierarchies (Button/Checkbox). All products of
 // the same family have the common interface.
 // This is the common interface for buttons family.
public interface Button {
    void paint();
}



 // All products families have the same varieties (MacOS/Windows).
 // This is a MacOS variant of a button.

public class MacOSButton implements Button {
    @Override
    public void paint() {
        System.out.println("You have created MacOSButton.");
    }
}




//get the user name from other pages
        System.out.println("uuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
        SharedPreferences sharedPreferences=getSharedPreferences("U",MODE_PRIVATE);
        SharedPreferences.Editor editor;
        editor=sharedPreferences.edit();
        System.out.println(sharedPreferences.getString("username",null));
        System.out.println("uuuuuuuuuuuuuuuuuuuuuuuuuuuuu");